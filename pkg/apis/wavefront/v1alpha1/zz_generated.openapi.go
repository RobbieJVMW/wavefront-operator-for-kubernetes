// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1alpha1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"./pkg/apis/wavefront/v1alpha1.WavefrontCollector":       schema_pkg_apis_wavefront_v1alpha1_WavefrontCollector(ref),
		"./pkg/apis/wavefront/v1alpha1.WavefrontCollectorSpec":   schema_pkg_apis_wavefront_v1alpha1_WavefrontCollectorSpec(ref),
		"./pkg/apis/wavefront/v1alpha1.WavefrontCollectorStatus": schema_pkg_apis_wavefront_v1alpha1_WavefrontCollectorStatus(ref),
		"./pkg/apis/wavefront/v1alpha1.WavefrontProxy":           schema_pkg_apis_wavefront_v1alpha1_WavefrontProxy(ref),
		"./pkg/apis/wavefront/v1alpha1.WavefrontProxySpec":       schema_pkg_apis_wavefront_v1alpha1_WavefrontProxySpec(ref),
		"./pkg/apis/wavefront/v1alpha1.WavefrontProxyStatus":     schema_pkg_apis_wavefront_v1alpha1_WavefrontProxyStatus(ref),
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontCollector(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontCollector is the Schema for the wavefrontcollectors API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/wavefront/v1alpha1.WavefrontCollectorSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/wavefront/v1alpha1.WavefrontCollectorStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/wavefront/v1alpha1.WavefrontCollectorSpec", "./pkg/apis/wavefront/v1alpha1.WavefrontCollectorStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontCollectorSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontCollectorSpec defines the desired state of WavefrontCollector",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Defaults to wavefronthq/wavefront-kubernetes-collector:latest",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"daemon": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to deploy the collector as a daemonset. False will roll out as a deployment.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"disableUpdate": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to disable automatically updating the collector if a new version becomes available.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"enableDebug": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether to enable debug logging and profiling",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"env": {
						SchemaProps: spec.SchemaProps{
							Description: "List of environment variables to set for the Collector containers.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Compute resources required by the Collector containers.",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"tolerations": {
						SchemaProps: spec.SchemaProps{
							Description: "Tolerations for the collector pods",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.Toleration"),
									},
								},
							},
						},
					},
					"configName": {
						SchemaProps: spec.SchemaProps{
							Description: "The name of the config map providing the configuration for the collector instance. If empty, a default name of \"collectorName-config\" is assumed.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements", "k8s.io/api/core/v1.Toleration"},
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontCollectorStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontCollectorStatus defines the observed state of WavefrontCollector",
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"updatedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontProxy(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontProxy is the Schema for the wavefrontproxies API",
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/wavefront/v1alpha1.WavefrontProxySpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/wavefront/v1alpha1.WavefrontProxyStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/wavefront/v1alpha1.WavefrontProxySpec", "./pkg/apis/wavefront/v1alpha1.WavefrontProxyStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontProxySpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontProxySpec defines the desired state of WavefrontProxy",
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "The WavefrontProxy image to use. Defaults to wavefronthq/proxy:latest",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"url": {
						SchemaProps: spec.SchemaProps{
							Description: "Wavefront URL (cluster).",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"token": {
						SchemaProps: spec.SchemaProps{
							Description: "Wavefront API Token.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"size": {
						SchemaProps: spec.SchemaProps{
							Description: "The no. of replicas for Wavefront Proxy",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"proxyEnabled": {
						SchemaProps: spec.SchemaProps{
							Description: "Whether proxy is enabled.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"config": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("./pkg/apis/wavefront/v1alpha1.ProxyConfig"),
						},
					},
					"metricPorts": {
						SchemaProps: spec.SchemaProps{
							Description: "// The port number the proxy will listen on for metrics in Wavefront data format. // This is usually port 2878",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
				},
			},
		},
		Dependencies: []string{
			"./pkg/apis/wavefront/v1alpha1.ProxyConfig"},
	}
}

func schema_pkg_apis_wavefront_v1alpha1_WavefrontProxyStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WavefrontProxyStatus defines the observed state of WavefrontProxy",
				Properties: map[string]spec.Schema{
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "INSERT ADDITIONAL STATUS FIELD - define observed state of cluster Important: Run \"operator-sdk generate k8s\" to regenerate code after modifying this file Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"createdTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
					"updatedTimestamp": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.Time"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"k8s.io/apimachinery/pkg/apis/meta/v1.Time"},
	}
}
